{"version":3,"sources":["components/add-todo.js","components/todo-ui.js","components/completed-todos.js","App.js","serviceWorker.js","index.js"],"names":["AddTask","props","handleChange","e","setState","target","id","value","handleSubmit","preventDefault","state","task","time","addTodo","date","className","Container","Row","Col","xs","md","size","offset","Form","onSubmit","this","FormGroup","row","Input","onChange","type","placeholder","name","Button","color","Component","TodoUI","todos","toggleCheckbox","deleteTask","taskList","allCheckedUnchecked","checkUncheckAll","checked","handleCheckUncheck","length","map","todo","event","newTodoDate","Date","toDateString","ListGroupItem","key","ListGroupItemHeading","check","ListGroup","completedTodoUI","completedTodos","completedToggleCheckbox","taskCompleted","App","newTask","Math","floor","random","isChecked","newTodos","taskLeft","filter","delTask","console","log","newCompletedTodos","completedTaskLeft","todoLeft","todoChecks","itemChecks","allUncheckedUnchecked","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a483fa49.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Container, Row, Col, Button, Form, FormGroup, Input } from \"reactstrap\";\n\nclass AddTask extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        task: \"\",\n        date: \"\",\n        time: \"\",\n        // isChecked: false\n    };\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      //set id for input field to be same as state properties above\n      // grab the id of the target element and\n      // update the state properties\n      [e.target.id]: e.target.value,\n    });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    // console.log(this.state);\n    if (this.state.task === \"\" && this.state.time === \"\")\n    {\n      return null;\n    }\n    else\n    {\n\n      this.props.addTodo(this.state);\n      this.setState({\n        task: \"\",\n        date: \"\",\n        time: \"\",\n      });\n    }\n  };\n\n  render() {\n    // const { handleChange, handleSubmit, deleteTask } = this.props;\n    // const deleteTodo = todos.map((todo) => {\n    //   let todoDate = new Date(todo.date);\n    //   todoDate = todoDate.getDate();\n    //   return todoDate === curr_date ? \"Today\" : \"Upcoming\";\n    // });\n\n    return (\n      <div className=\"input-fields\">\n        <Container>\n          <Row>\n            <Col xs=\"12\" md={{ size: 6, offset: 3 }}>\n              <Form onSubmit={this.handleSubmit}>\n                <FormGroup row>\n                  <Col xs=\"12\" className=\"form-columns\">\n                    <Input\n                      onChange={this.handleChange}\n                      type=\"text\"\n                      id=\"task\"\n                      placeholder=\"Enter Your Task\"\n                      value={this.state.task}\n                    />\n                  </Col>\n                </FormGroup>\n                <FormGroup row>\n                    <Col xs=\"7\" className=\"form-columns\">\n                        <Input \n                            onChange={this.handleChange} \n                            type=\"date\" \n                            id=\"date\" \n                            value={this.state.date} \n                        />\n                    </Col>\n                    <Col xs=\"5\" className=\"form-columns\">\n                        <Input\n                            onChange={this.handleChange}\n                            type=\"select\"\n                            name=\"select\"\n                            id=\"time\"\n                            value={this.state.time}\n                        >\n                        <option>Select Time</option>\n                        <option>5:00am</option>\n                        <option>9:00am</option>\n                        <option>4:00pm</option>\n                        {/* <option>5</option> */}\n                        </Input>\n                    </Col>\n                </FormGroup>\n                <FormGroup row>\n                  <Col xs=\"5\" className=\"form-columns\">\n                    <Button id=\"add-todo\" color=\"success\">\n                      Add Task\n                    </Button>\n                  </Col>\n                </FormGroup>\n              </Form>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default AddTask;","import React from 'react'\nimport {\n            Container, Row, Col, Button, Form, FormGroup, Input, Label,\n            ListGroup, ListGroupItem,ListGroupItemHeading\n        } from \"reactstrap\";\n\nconst TodoUI = ({\n  todos,\n  deleteTask,\n  toggleCheckbox,\n  allCheckedUnchecked,\n  checkUncheckAll,\n  checked,\n  handleCheckUncheck,\n}) => {\n  const taskList = todos.length ? (\n    todos.map((todo,event) => {\n      let newTodoDate = new Date(todo.date);\n      newTodoDate = newTodoDate.toDateString();\n      // if (newTodoDate === curr_date) {\n      return (\n        // <div className=\"list-groups\">\n        <ListGroupItem className=\"my-tasks\" key={todo.id}>\n          <ListGroupItemHeading>{newTodoDate}</ListGroupItemHeading>\n          <div>\n            <Form className=\"todo-item\">\n              <FormGroup check>\n                <Input\n                  type=\"checkbox\"\n                  id={todo.id}\n                  onChange={() => toggleCheckbox(todo,event)}\n                  // checked={todo.isChecked}\n                />{\" \"}\n              </FormGroup>\n              <p>{todo.task}</p>\n              <p>{todo.time}</p>\n            </Form>\n            {/* <p>{todo.date}</p> */}\n          </div>\n        </ListGroupItem>\n        // </div>\n      );\n      // }\n    })\n  ) : (\n    <p id=\"addTask\">You have not added any task yet</p>\n  );\n\n  return (\n    <div className=\"task-list\">\n      <Container>\n        <Row>\n          <Col xs=\"12\" md={{ size: 6, offset: 3 }}>\n            <div>\n              <h3 id=\"schedule\">{todos.length ? \"My Todos\" : null}</h3>\n            </div>\n          </Col>\n        </Row>\n        <Row>\n          <Col xs=\"12\" md={{ size: 6, offset: 3 }}>\n            <ListGroup>{taskList}</ListGroup>\n          </Col>\n        </Row>\n        {/* <Row>\n          <Col xs=\"12\" md={{ size: 6, offset: 3 }} className=\"select-all\">\n            {todos.length ? (\n              <Form>\n                <FormGroup row>\n                  <Col xs={8}>\n                    <FormGroup check>\n                      <Label check>\n                        <Input\n                          type=\"checkbox\"\n                          id=\"check-uncheck-all\"\n                          checked={allCheckedUnchecked}\n                          onChange={checkUncheckAll}\n                        />\n                        <span value=\"selectUnselectAll\">\n                          Select/Unselect All\n                        </span>\n                      </Label>\n                    </FormGroup>\n                  </Col>\n                  <Col xs={2}>\n                    <Button color=\"danger\" onClick={deleteTask} id=\"delete\">\n                      Delete\n                    </Button>\n                  </Col>\n                </FormGroup>\n              </Form>\n            ) : null}\n          </Col>\n        </Row> */}\n      </Container>\n    </div>\n  );\n};\n\nexport default TodoUI;","import React from 'react'\nimport {\n            Container, Row, Col, Button, Form, FormGroup, Input, Label,\n            ListGroup, ListGroupItem,ListGroupItemHeading\n        } from \"reactstrap\";\n\nconst completedTodoUI = ({\n  completedTodos,\n  deleteTask,\n  completedToggleCheckbox,\n  allCheckedUnchecked,\n  checkUncheckAll,\n  checked,\n  handleCheckUncheck,\n}) => {\n    let completedArray = completedTodos.length;\n  const taskCompleted = completedTodos.length ? (\n    completedTodos.map((todo) => {\n      let newTodoDate = new Date(todo.date);\n      newTodoDate = newTodoDate.toDateString();\n      // if (newTodoDate === curr_date) {\n      return (\n        //   todo.isChecked ? (\n            <ListGroupItem className=\"my-tasks\" key={todo.id}>\n            <ListGroupItemHeading>{newTodoDate}</ListGroupItemHeading>\n            <div>\n              <Form className=\"todo-item\">\n                <FormGroup check>\n                  <Input\n                    type=\"checkbox\"\n                    id={todo.id}\n                    onChange={() => completedToggleCheckbox(todo)}\n                    // checked={todo.isChecked}\n                  />{\" \"}\n                </FormGroup>\n                <p>{todo.task}</p>\n                <p>{todo.time}</p>\n              </Form>\n              {/* <p>{todo.date}</p> */}\n            </div>\n          </ListGroupItem>\n        //   ) : (\n        //       \"No task completed\"\n        //   )\n        // <div className=\"list-groups\">\n        // </div>\n      );\n      // }\n    })\n  ) : (\n\"\"\n  );\n\n  return (\n    <div className=\"task-list\">\n<Container>\n  <Row>\n    <Col xs=\"12\" md={{ size: 6, offset: 3 }}>\n      <div>\n        <h3 id=\"schedule\">{completedTodos.length ? \"Completed Todos\" : null}</h3>\n      </div>\n    </Col>\n  </Row>\n  <Row>\n    <Col xs=\"12\" md={{ size: 6, offset: 3 }}>\n      <ListGroup>{taskCompleted}</ListGroup>\n    </Col>\n  </Row>\n  {/* <Row>\n    <Col xs=\"12\" md={{ size: 6, offset: 3 }} className=\"select-all\">\n      {todos.length ? (\n        <Form>\n          <FormGroup row>\n            <Col xs={8}>\n              <FormGroup check>\n                <Label check>\n                  <Input\n                    type=\"checkbox\"\n                    id=\"check-uncheck-all\"\n                    checked={allCheckedUnchecked}\n                    onChange={checkUncheckAll}\n                  />\n                  <span value=\"selectUnselectAll\">\n                    Select/Unselect All\n                  </span>\n                </Label>\n              </FormGroup>\n            </Col>\n            <Col xs={2}>\n              <Button color=\"danger\" onClick={deleteTask} id=\"delete\">\n                Delete\n              </Button>\n            </Col>\n          </FormGroup>\n        </Form>\n      ) : null}\n    </Col>\n  </Row> */}\n</Container>\n</div>\n  );\n};\n\nexport default completedTodoUI;","import React, { Component } from 'react';\nimport AddTask from './components/add-todo';\nimport TodoUI from './components/todo-ui';\nimport CompletedTodoUI from './components/completed-todos';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: [],\n      completedTodos: []\n      // checked: false,\n      // allUncheckedUnchecked: false\n    };\n  }\n\n  addTodo = (newTask) => {\n    newTask.id = Math.floor(Math.random() * 1000);\n    newTask.isChecked = false;\n    if (newTask.id !== this.state.todos.id) {\n      // console.log(newTask.id);\n      // const todos = this.state.todos.map(item => {\n\n      // })\n      // const check = this.state.checked;\n      let newTodos = [...this.state.todos, newTask];\n      this.setState({\n        // state.todos.isChecked = !state.todos.isChecked;\n        todos: newTodos \n      })\n      // console.log(newTodos);\n    }\n    \n    else {\n      return null;\n    }\n  };\n  \n\n  deleteTask = () => {\n    // console.log(id)\n    // const taskLeft = this.state.todos.filter((todo) => {\n    //   if (todo.isChecked === false) {\n    //     todo.isChecked = true\n    //   }\n    //   else {\n    //     todo.isChecked = false;\n    //   }\n    //   // todo.isChecked = this.handleCheckUncheck\n    //   return todo.isChecked !== true;\n    // });\n    // this.setState({\n    //   todos: taskLeft,\n    // });\n    // console.log(taskLeft);\n    const taskLeft = this.state.todos.filter(todo => {\n      return todo.isChecked !== true;\n    });\n    this.setState({\n      todos: taskLeft\n    })\n  };\n\n  toggleCheckbox = (delTask,event) => {\n    console.log(event);\n    if (delTask.isChecked === false) {\n      delTask.isChecked = true;\n      // this.state.todos.pop(delTask);\n      // this.state.completedTodos.push(delTask);\n      const taskLeft = this.state.todos.filter(todo => {\n        return todo.isChecked !== true;\n      });\n      this.setState({\n        todos: taskLeft\n      })\n\n      let newCompletedTodos = [...this.state.completedTodos, delTask];\n      this.setState({\n        // state.todos.isChecked = !state.todos.isChecked;\n        completedTodos: newCompletedTodos \n      })\n\n      // console.log(this.state.todos);\n      // console.log(this.state.completedTodos);\n\n    } else {\n      delTask.isChecked = false;\n\n      // const completedTaskLeft = this.state.completedTodos.filter(todo => {\n      //   return todo.isChecked === true;\n      // });\n      // this.setState({\n      //   completedTodos: completedTaskLeft\n      // })\n    }\n  };\n\n  completedToggleCheckbox = (delTask) => {\n    if (delTask.isChecked === true) {\n      delTask.isChecked = false;\n      // this.state.todos.pop(delTask);\n      // this.state.completedTodos.push(delTask);\n      // const taskLeft = this.state.todos.filter(todo => {\n      //   return todo.isChecked !== true;\n      // });\n      // this.setState({\n      //   todos: taskLeft\n      // })\n      const completedTaskLeft = this.state.completedTodos.filter(todo => {\n        return todo.isChecked === true;\n      });\n      this.setState({\n        completedTodos: completedTaskLeft\n      })\n\n      let todoLeft = [...this.state.todos, delTask];\n      this.setState({\n        // state.todos.isChecked = !state.todos.isChecked;\n        todos: todoLeft \n      })\n\n      // console.log(this.state.todos);\n      // console.log(this.state.completedTodos);\n\n    } else {\n      delTask.isChecked = true;\n      // let todoLeft = [...this.state.todos, delTask];\n      // this.setState({\n      //   // state.todos.isChecked = !state.todos.isChecked;\n      //   todos: todoLeft \n      // })\n\n      // const completedTaskLeft = this.state.completedTodos.filter(todo => {\n      //   return todo.isChecked === true;\n      // });\n      // this.setState({\n      //   completedTodos: completedTaskLeft\n      // })\n    }\n\n  }\n\n  handleCheckUncheck = (e, id) => {\n    \n    let itemId = e.target.id;\n    let checked = e.target.checked;\n    // this.setState((prevState) => {\n    //   let { todos, allUnchecked } = prevState;\n    //   if (itemId === \"check-uncheck-all\") {\n    //     allUnchecked = checked;\n    //     todos = todos.map((item) => ({ ...item, isChecked: checked }));\n    //     console.log(todos)\n    //   } else {\n    //     todos = todos.map((item) =>\n    //       item.id === itemId ? { ...item, isChecked: checked } : item\n    //     );\n    //     allUnchecked = todos.every((item) => item.isChecked);\n    //     console.log(todos);\n    //   }\n    //   return { todos, allUnchecked };\n    this.setState({ checked: !this.state.checked });\n    const todoChecks = this.state.todos.map((itemChecks) => {\n      // this.setState({ checked: !this.state.checked });\n      // if (itemChecks.id === id) {\n        return { ...itemChecks, isChecked: e.target.checked };  \n      // }\n      \n      // return itemChecks.isChecked = e.target.checked;\n    });\n    console.log(e.target.checked);\n    console.log(todoChecks)\n    \n  }\n\n  checkUncheckAll = (e) => {\n    // let checked = e.target.checked;\n    let checkboxName = e.target.name;\n    if (checkboxName === 'check-uncheck-all') {\n      // let todosChecked = this.state.todos.map(todo => {\n      //   return todo.isChecked = checked;\n      // })\n      this.setState({ allUncheckedUnchecked: !this.state.allUncheckedUnchecked});\n      // console.log(checked);\n    }\n \n      // this.setState({ allUncheckedUnchecked: !this.state.allUncheckedUnchecked });\n   \n    \n    // \n    // const checkUncheck = this.state.todos.map((todo) => {\n    //   if (todo.isChecked === false) {\n    //     return (todo.isChecked = true);\n    //   } else {\n    //     return (todo.isChecked = false);\n    //   }\n    // });\n    // this.setState({ todos: checkUncheck });\n  };\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h2 className=\"\" id=\"task-header\">\n          Task Scheduler\n        </h2>\n        <AddTask addTodo={this.addTodo} />\n        <TodoUI\n          todos={this.state.todos}\n          deleteTask={this.deleteTask}\n          toggleCheckbox={this.toggleCheckbox}\n          handleCheckUncheck={this.handleCheckUncheck}\n          checked={this.state.checked}\n          allUncheckedUnchecked={this.state.allUncheckedUnchecked}\n          checkUncheckAll={this.checkUncheckAll}\n        />\n        <CompletedTodoUI\n          completedTodos={this.state.completedTodos}\n          completedToggleCheckbox={this.completedToggleCheckbox}\n        />\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}